@using Azure.Core
@model IEnumerable<BookStore.Data.Data.Entities.Book>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

<meta name="csrf-token" content="@Antiforgery.GetAndStoreTokens(Context).RequestToken" />

@{
    ViewData["Title"] = "Books";
    var searchQuery = ViewData["SearchQuery"] as string;
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-11 bg-secondary bg-opacity-10 p-4 rounded">
            <div class="row align-items-center mb-4">
                <div class="col">
                    <h1 class="mb-0">Books</h1>
                </div>
                <div class="col-auto">
                    <a asp-action="Create" class="btn btn-secondary d-flex align-items-center gap-2 px-3 py-2" style="font-weight: 500;">
                        <ion-icon name="add-circle-outline" style="font-size: 1.4rem;"></ion-icon>
                        Add
                    </a>
                </div>
            </div>

            <form method="get" class="mb-4">
                <div class="row align-items-end gx-3">
                    <div class="col-md-6">
                        <div class="d-flex">
                            @await Html.PartialAsync("_SearchBarPartial")

                            @if (!string.IsNullOrWhiteSpace(searchQuery))
                            {
                                if (!Model.Any())
                                {
                                    <p class="mt-2 text-muted ms-3">No results for "<strong>@searchQuery</strong>"</p>
                                }
                                else
                                {
                                    <p class="mt-2 text-muted ms-3">Search results for "<strong>@searchQuery</strong>"</p>
                                }
                            }
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="d-flex align-items-center">
                            <label for="sortOrder" class="form-label me-2 mb-0">Sort by</label>
                            <select name="sortOrder" class="form-select w-auto" onchange="this.form.submit()">
                                <option value="newest" selected="@(ViewData["SortOrder"]?.ToString() == null || ViewData["SortOrder"]?.ToString() == "newest")">Time added (newest)</option>
                                <option value="oldest" selected="@(ViewData["SortOrder"]?.ToString() == "oldest")">Time added (oldest)</option>
                                <option value="title" selected="@(ViewData["SortOrder"]?.ToString() == "title")">Title (A–Z)</option>
                                <option value="quantity_asc" selected="@(ViewData["SortOrder"]?.ToString() == "quantity_asc")">Quantity (lowest)</option>
                                <option value="quantity_desc" selected="@(ViewData["SortOrder"]?.ToString() == "quantity_desc")">Quantity (highest)</option>
                                <option value="price_asc" selected="@(ViewData["SortOrder"]?.ToString() == "price_asc")">Price (lowest)</option>
                                <option value="price_desc" selected="@(ViewData["SortOrder"]?.ToString() == "price_desc")">Price (highest)</option>
                                <option value="year_asc" selected="@(ViewData["SortOrder"]?.ToString() == "year_asc")">Year (oldest)</option>
                                <option value="year_desc" selected="@(ViewData["SortOrder"]?.ToString() == "year_desc")">Year (newest)</option>
                                <option value="pages_asc" selected="@(ViewData["SortOrder"]?.ToString() == "pages_asc")">Pages (lowest)</option>
                                <option value="pages_desc" selected="@(ViewData["SortOrder"]?.ToString() == "pages_desc")">Pages (highest)</option>
                            </select>
                        </div>
                    </div>
                </div>
            </form>

            <table class="table table-borderless table-striped align-middle mb-0">
                <thead>
                    <tr class="text-muted border-bottom">
                        <th>@Html.DisplayNameFor(model => model.Title)</th>
                        <th>@Html.DisplayNameFor(model => model.Description)</th>
                        <th>@Html.DisplayNameFor(model => model.Price)</th>
                        <th>@Html.DisplayNameFor(model => model.NumberOfPages)</th>
                        <th>@Html.DisplayNameFor(model => model.YearPublished)</th>
                        <th>@Html.DisplayNameFor(model => model.Language)</th>
                        <th>@Html.DisplayNameFor(model => model.Quantity)</th>
                        <th>@Html.DisplayNameFor(model => model.ISBN)</th>
                        <th>@Html.DisplayNameFor(model => model.Author)</th>
                        <th>@Html.DisplayNameFor(model => model.ImageUrl)</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr data-id="@item.IdBook">
                            <td>@item.Title</td>
                            <td><div class="text-fade">@item.Description</div></td>
                            <td>@item.Price</td>
                            <td>@item.NumberOfPages</td>
                            <td>@item.YearPublished</td>
                            <td>@item.Language</td>
                            <td>@item.Quantity</td>
                            <td>@item.ISBN</td>
                            <td>@item.Author.FirstName @item.Author.LastName</td>
                            <td>
                                <img src="~/images/@item.ImageUrl" alt="@item.ImageUrl" style="max-height: 60px; max-width: 60px; object-fit: cover;" />
                            </td>
                            <td class="text-end" style="min-width:130px;">
                                <a asp-action="Edit" asp-route-id="@item.IdBook" class="icon-btn" aria-label="Edit">
                                    <ion-icon name="create-outline" style="font-size:1.2rem;"></ion-icon>
                                </a>
                                <a asp-action="Details" asp-route-id="@item.IdBook" class="icon-btn" aria-label="Details">
                                    <ion-icon name="information-circle-outline" style="font-size:1.2rem;"></ion-icon>
                                </a>
                                <button type="button"
                                        class="icon-btn text-danger btn-delete"
                                        aria-label="Delete"
                                        data-bs-toggle="modal"
                                        data-bs-target="#deleteModal"
                                        data-id="@item.IdBook"
                                        style="background:none; border:none; padding:0;">
                                    <ion-icon name="trash-outline" style="font-size:1.2rem;"></ion-icon>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Deletion</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Are you sure to delete @ViewData["ItemName"]?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let deleteId = null;
        const deleteModal = document.getElementById('deleteModal');
        deleteModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            deleteId = button.getAttribute('data-id');
        });

        document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
            if (!deleteId) return;

            const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

            fetch(`/Book/DeleteConfirmed/${deleteId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (response.ok) {
                    const row = document.querySelector(`tr[data-id='${deleteId}']`);
                    if (row) row.remove();
                    const modal = bootstrap.Modal.getInstance(deleteModal);
                    modal.hide();
                } else {
                    alert("Error");
                }
            })
            .catch(() => {
                alert("Error");
            });
        });
    </script>

}
