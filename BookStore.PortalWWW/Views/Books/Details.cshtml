@model BookStore.Data.Data.Entities.Book

@{
    ViewData["Title"] = @Model.Title;
}

<div class="container my-5">
    <div class="row">
        <nav class="col-md-2 pe-3" style="position: sticky; top: 80px; height: calc(100vh - 80px); overflow-y: auto;">
            @await Component.InvokeAsync("GenresList")
        </nav>

        <div class="col-md-10">
            <div class="row">
                <div class="col-md-6">
                    <img src="~/images/@Model.ImageUrl" class="fixed-image-lg" alt="@Model.Title" />
                </div>
                <div class="col-md-6 align-content-center">
                    <h2>@Model.Title</h2>
                    <p><strong>Author:</strong> @(Model.Author != null ? $"{Model.Author.FirstName} {Model.Author.LastName}" : "Unknown")</p>
                    <p><strong>Price:</strong> $@Model.Price</p>
                    <p><strong>Number of Pages:</strong> @Model.NumberOfPages</p>
                    <p>
                        <strong>Genres:</strong>
                        @(Model.BookGenres != null && Model.BookGenres.Any()
                            ? string.Join(", ", Model.BookGenres.Select(bg => bg.Genre?.Name).Where(name => !string.IsNullOrEmpty(name)))
                            : "Unknown")
                    </p>
                    <p><strong>Year Published:</strong> @Model.YearPublished</p>
                    <p><strong>Language:</strong> @Model.Language</p>

                    <div class="d-flex align-items-center mb-3">
                        <button class="btn btn-outline-secondary me-2">-</button>
                        <input type="number" value="1" class="form-control w-25 text-center" id="quantity" min="1" />
                        <button class="btn btn-outline-secondary mx-2">+</button>
                        @Html.AntiForgeryToken()
                        @await Html.PartialAsync("_BookActionButtons", Model.IdBook)
                    </div>
                </div>
            </div>

            <div class="mt-5">
        <h4>Description</h4>
        <p>@Model.Description</p>

        <div class="mt-4">
            @if (Model.Reviews != null && Model.Reviews.Any())
            {
                var avgRating = Model.Reviews.Average(r => r.Rating);
                var fullStars = (int)Math.Floor(avgRating);
                var halfStar = avgRating - fullStars >= 0.5;
                var emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
                <div class="mb-3">
                    <strong>Average Rating:</strong>
                    <span class="text-warning">
                        @for (int i = 0; i < fullStars; i++)
                        {
                            <i class="fas fa-star"></i>
                        }
                        @if (halfStar)
                        {
                            <i class="fas fa-star-half-alt"></i>
                        }
                        @for (int i = 0; i < emptyStars; i++)
                        {
                            <i class="far fa-star"></i>
                        }
                    </span>
                    <span> (@avgRating.ToString("0.0") out of 5)</span>
                </div>
            }
            else
            {
                <div class="mb-3">
                    <strong>Average Rating:</strong> <span>No ratings yet.</span>
                </div>
            }

                @if (User.Identity.IsAuthenticated)
                {
                    <form method="post" asp-controller="Books" asp-action="PostReview" id="reviewForm" class="mb-4">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="BookId" value="@Model.IdBook" />
                        <input type="hidden" name="ReviewId" id="ReviewId" value="" />

                        <div class="mb-3">
                            <label for="Rating" class="form-label"><strong>Rating</strong></label>
                            <select id="Rating" name="Rating" class="form-select" required>
                                <option value="">Select rating</option>
                                <option value="5">5 - Excellent</option>
                                <option value="4">4 - Good</option>
                                <option value="3">3 - Average</option>
                                <option value="2">2 - Poor</option>
                                <option value="1">1 - Terrible</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="Comment" class="form-label"><strong>Comment</strong></label>
                            <textarea id="Comment" name="Comment" class="form-control" rows="3" placeholder="Leave a comment..." required></textarea>
                        </div>

                        <button type="submit" class="btn btn-primary" id="submitReviewBtn">Submit Comment</button>
                        <button type="button" class="btn btn-secondary" id="cancelEditBtn" style="display:none;">Cancel Edit</button>
                    </form>
                }
                else
                {
                    <p>Please <a asp-controller="Account" asp-action="Login">log in</a> to leave a review.</p>
                }

            <div class="comments-section">
                @if (Model.Reviews != null && Model.Reviews.Any())
                {
                    @foreach (var review in Model.Reviews.OrderByDescending(r => r.DateAdded))
                    {
                        <div class="mb-3 border-bottom pb-2">
                            <strong>@review.User?.Username</strong>
                            <span>
                                @for (int i = 0; i < review.Rating; i++)
                                {
                                    <i class="fas fa-star text-warning"></i>
                                }
                                @for (int i = review.Rating; i < 5; i++)
                                {
                                    <i class="far fa-star text-warning"></i>
                                }
                            </span>
                            <p>@review.Comment</p>
                            <small class="text-muted">@review.DateAdded.ToString("MMM dd, yyyy")</small>

                            @if (User.Identity.IsAuthenticated && review.IdUser == int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0"))
                            {
                                <div>
                                    <button type="button" class="btn btn-sm btn-outline-primary edit-review-btn"
                                            data-review-id="@review.IdReview"
                                            data-rating="@review.Rating"
                                            data-comment="@review.Comment">
                                        Edit
                                    </button>

                                    <form method="post" asp-controller="Books" asp-action="DeleteReview" asp-route-reviewId="@review.IdReview" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                    </form>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <p>No comments yet.</p>
                }
            </div>
        </div>
        </div>
    </div>
</div>

<script>
    var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();
</script>

@section Scripts {
    @await Html.PartialAsync("_BookCardScriptsPartial")

    <script>
        document.querySelectorAll('.edit-review-btn').forEach(button => {
            button.addEventListener('click', () => {
                const reviewId = button.getAttribute('data-review-id');
                const rating = button.getAttribute('data-rating');
                const comment = button.getAttribute('data-comment');

                document.getElementById('ReviewId').value = reviewId;
                document.getElementById('Rating').value = rating;
                document.getElementById('Comment').value = comment;

                document.getElementById('submitReviewBtn').textContent = 'Update Comment';
                document.getElementById('cancelEditBtn').style.display = 'inline-block';
                document.getElementById('reviewForm').scrollIntoView({ behavior: 'smooth' });
            });
        });

        document.getElementById('cancelEditBtn').addEventListener('click', () => {
            document.getElementById('ReviewId').value = '';
            document.getElementById('Rating').value = '';
            document.getElementById('Comment').value = '';
            document.getElementById('submitReviewBtn').textContent = 'Submit Comment';
            document.getElementById('cancelEditBtn').style.display = 'none';
        });
    </script>
}
