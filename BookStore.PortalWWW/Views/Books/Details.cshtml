@model BookStore.Data.Data.Entities.Book

@{
    ViewData["Title"] = @Model.Title;
    var avgRating = Model.Reviews != null && Model.Reviews.Any() ? Model.Reviews.Average(r => r.Rating) : 0;
    var fullStars = (int)Math.Floor(avgRating);
    var halfStar = avgRating - fullStars >= 0.5;
    var emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
    var reviewError = TempData["ReviewError"] as string;
}

<div class="row">
    <div class="col-md-2 py-3">
        <div class="px-3 py-4">
            @await Component.InvokeAsync("GenresList")
        </div>
    </div>

    <div class="col-md-10">
        <div class="container my-5">
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="row g-4">
                    <div class="col-md-5 text-center">
                        <img src="~/images/@Model.ImageUrl" class="img-fluid rounded shadow mb-3" alt="@Model.Title" style="max-height: 420px;" />
                    </div>
                    <div class="col-md-7 d-flex flex-column justify-content-center">
                        <h1 class="display-4">@Model.Title</h1>

                        <p class="text-muted fs-5 mb-2">
                            @(Model.Author != null ? $"{Model.Author.FirstName} {Model.Author.LastName}" : "Unknown Author")
                        </p>

                        <div class="mb-3">
                            <span class="text-warning fs-5">
                                @for (int i = 0; i < fullStars; i++)
                                {
                                    <i class="bi bi-star-fill"></i>
                                }
                                @if (halfStar)
                                {
                                    <i class="bi bi-star-half"></i>
                                }
                                @for (int i = 0; i < emptyStars; i++)
                                {
                                    <i class="bi bi-star"></i>
                                }
                            </span>
                            <span class="ms-2 fs-5 fw-semibold">@avgRating.ToString("0.0") / 5</span>
                        </div>

                        <div class="mb-4">
                            <span class="fs-2 fw-bold color-secondary">
                                @Model.Price.ToString("C")
                            </span>
                        </div>

                        <div class="d-flex gap-3 mb-4">
                            <button class="btn btn-warning btn-lg flex-grow-1 fw-bold add-to-cart" data-book-id="@Model.IdBook" type="button">
                                <i class="bi bi-cart-plus me-2"></i> Add to Cart
                            </button>

                            <button class="btn btn-outline-danger btn-lg toggle-collection" data-book-id="@Model.IdBook" title="Add to Collection" type="button">
                                <i class="bi bi-suit-heart"></i>
                            </button>
                        </div>

                        <div class="mt-3">
                            <h5>Details</h5>
                            <div class="card card-body">
                                <dl class="row mb-0">
                                    <dt class="col-sm-3">Pages</dt>
                                    <dd class="col-sm-9">@Model.NumberOfPages</dd>

                                    <dt class="col-sm-3">Date published</dt>
                                    <dd class="col-sm-9">@Model.YearPublished</dd>

                                    <dt class="col-sm-3">Language</dt>
                                    <dd class="col-sm-9">@Model.Language</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-5">
                    <h4>Description</h4>
                    <div class="card card-body">@Model.Description</div>
                </div>

                <div class="mt-5">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3>Reviews</h3>
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reviewModal">
                                <i class="bi bi-pencil-square me-2"></i> Add review
                            </button>
                        }
                    </div>

                    @if (Model.Reviews != null && Model.Reviews.Any())
                    {
                        @foreach (var review in Model.Reviews.OrderByDescending(r => r.DateAdded))
                        {
                            <div class="mb-4 border-bottom pb-3">
                                <div class="d-flex align-items-center mb-1">
                                    <strong>@review.User?.Username</strong>
                                    <span class="ms-2">
                                        @for (int i = 0; i < review.Rating; i++)
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>
                                        }
                                        @for (int i = review.Rating; i < 5; i++)
                                        {
                                            <i class="bi bi-star text-warning"></i>
                                        }
                                    </span>
                                </div>
                                <p>@review.Comment</p>
                                <small class="text-muted">@review.DateAdded.ToString("MMM dd, yyyy")</small>

                                @if (User.Identity.IsAuthenticated && review.IdUser == int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0"))
                                {
                                    <div class="mt-2">
                                        <button type="button" class="btn btn-sm btn-outline-primary edit-review-btn"
                                                data-review-id="@review.IdReview"
                                                data-rating="@review.Rating"
                                                data-comment="@review.Comment"
                                                data-bs-toggle="modal" data-bs-target="#reviewModal"
                                                aria-label="Edit review" title="Edit review">
                                            <i class="bi bi-pencil"></i>
                                        </button>

                                        <form method="post" asp-controller="Books" asp-action="DeleteReview" asp-route-reviewId="@review.IdReview" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-sm btn-outline-danger" aria-label="Delete review" title="Delete review">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No reviews yet</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form asp-action="PostReview" asp-controller="Books" method="post" class="modal-content">
            @Html.AntiForgeryToken()
            <input type="hidden" name="BookId" value="@Model.IdBook" />
            <input type="hidden" name="ReviewId" id="ReviewId" value="" />

            <div class="modal-header">
                <h5 class="modal-title" id="reviewModalLabel">Add review</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="mb-3">
                    <label for="Rating" class="form-label">Rating</label>
                    <select class="form-select" name="Rating" id="Rating" required>
                        <option value="">Select rating</option>
                        @for (int i = 1; i <= 5; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="Comment" class="form-label">Comment</label>
                    <textarea class="form-control" name="Comment" id="Comment" rows="4" required></textarea>
                </div>
                @if (!string.IsNullOrEmpty(reviewError))
                {
                    <div class="alert alert-danger">@reviewError</div>
                }
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn bg-primary text-white">Submit Review</button>
                <button type="button" class="btn bg-secondary text-white" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_BookCardScriptsPartial")

    <script>
        $(document).ready(function () {
            $('.edit-review-btn').on('click', function () {
                var reviewId = $(this).data('review-id');
                var rating = $(this).data('rating');
                var comment = $(this).data('comment');

                $('#reviewModalLabel').text('Edit review');
                $('#ReviewId').val(reviewId);
                $('#Rating').val(rating);
                $('#Comment').val(comment);
            });

            $('button[data-bs-target="#reviewModal"]').not('.edit-review-btn').on('click', function () {
                $('#reviewModalLabel').text('Add review');

                $('#ReviewId').val('');
                $('#Rating').val('');
                $('#Comment').val('');
            });

            $('#reviewModal').on('hidden.bs.modal', function () {
                $('#reviewModalLabel').text('Add review');
                $('#ReviewId').val('');
                $('#Rating').val('');
                $('#Comment').val('');
            });
        });
    </script>
}
